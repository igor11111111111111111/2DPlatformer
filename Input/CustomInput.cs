//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/Input/CustomInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CustomInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CustomInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CustomInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""ecb069bc-d472-44cf-9ede-6a1486603e03"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1a1508dc-9437-4d9a-b145-0e51242f97b6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""a9392f42-bfd3-46e9-89b3-f3f066c2ee3d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""791fbb9e-e794-4408-8ecd-4395f70a919f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sit"",
                    ""type"": ""Button"",
                    ""id"": ""3926a439-48d6-4344-8152-453bee69602b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EnterDoor"",
                    ""type"": ""Button"",
                    ""id"": ""0cba3052-3a23-4c55-bd25-3e1fd2cbdb48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""2f5beddd-0679-47ac-bc9b-db300d998f75"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grab"",
                    ""type"": ""Button"",
                    ""id"": ""6c07edc4-4182-4d1d-aa11-952bd3a82a5c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PickUp"",
                    ""type"": ""Button"",
                    ""id"": ""d1bc399e-59e5-4968-aee6-9f5cbd9172f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseHealthPotion"",
                    ""type"": ""Button"",
                    ""id"": ""86cf8904-fb35-4871-9b31-fef1db4d8179"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkillWheel"",
                    ""type"": ""Button"",
                    ""id"": ""47d3d3f2-399f-4922-bcd7-c124b087ef5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReloadTommyGun"",
                    ""type"": ""Button"",
                    ""id"": ""12176e68-6f62-4085-8d44-446d00ae8db2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AD"",
                    ""id"": ""7f6451ea-3745-400f-ba24-1060d8418ebb"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""289e261e-3727-4627-9d16-fbd19d88e994"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""392a34f9-f2ed-44d3-bafc-437166da3111"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""280bdce2-bc6f-4d2f-80c8-2859dbe0030f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92e8702e-fc4d-4cc4-aef7-63604c7bd54a"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Sit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a2455d73-b342-4a59-bac2-e4739d81c043"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""EnterDoor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""642c4cb6-cfe0-4f81-9735-c1d2c04549dd"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5fe4346c-2f68-4760-91c2-8a8824fdc9b7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6446128-255c-420d-97d6-d63703045995"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""560fee57-19d0-4749-8860-d07b11dc828d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""PickUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""00358a7e-d56c-4dc7-a8bb-47a578529027"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""UseHealthPotion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29872061-03e2-4ca9-8b29-59e7958ff831"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SkillWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0fd2bd09-3f4e-4d3c-a303-58fb2eba368c"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ReloadTommyGun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Main"",
            ""id"": ""58664b48-d226-4c3c-a8f2-aaa54b25faae"",
            ""actions"": [
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""ddacc0af-888e-45cd-9f5c-5e7c98426784"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Save"",
                    ""type"": ""Button"",
                    ""id"": ""4f14b7a7-daaf-4d88-b014-31dfa7f1b831"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Load"",
                    ""type"": ""Button"",
                    ""id"": ""5f542164-8acb-42a9-af5b-27d15ec0a89d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""00dcb083-0be2-4c60-8858-fd553c10573e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e0bbcc77-c24a-4e59-a368-1eb1a74086ad"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c5c98d3-c554-4755-8c10-e53fe45f164a"",
                    ""path"": ""<Keyboard>/f7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Load"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02331579-ad3f-4ad0-8c62-cc122957c3d9"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b296fcb-0c98-4483-980a-f1eb3bce8e6c"",
                    ""path"": ""<Keyboard>/f5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Save"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""f46a789f-f9e8-4aad-abe7-ee771d7392a3"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""56def195-2d43-4f7c-8bc0-9a9274ff0455"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e2c72904-62bf-4c2d-a3de-cb1fc7479598"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Down = m_Player.FindAction("Down", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Sit = m_Player.FindAction("Sit", throwIfNotFound: true);
        m_Player_EnterDoor = m_Player.FindAction("EnterDoor", throwIfNotFound: true);
        m_Player_Attack = m_Player.FindAction("Attack", throwIfNotFound: true);
        m_Player_Grab = m_Player.FindAction("Grab", throwIfNotFound: true);
        m_Player_PickUp = m_Player.FindAction("PickUp", throwIfNotFound: true);
        m_Player_UseHealthPotion = m_Player.FindAction("UseHealthPotion", throwIfNotFound: true);
        m_Player_SkillWheel = m_Player.FindAction("SkillWheel", throwIfNotFound: true);
        m_Player_ReloadTommyGun = m_Player.FindAction("ReloadTommyGun", throwIfNotFound: true);
        // Main
        m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
        m_Main_Escape = m_Main.FindAction("Escape", throwIfNotFound: true);
        m_Main_Save = m_Main.FindAction("Save", throwIfNotFound: true);
        m_Main_Load = m_Main.FindAction("Load", throwIfNotFound: true);
        m_Main_Inventory = m_Main.FindAction("Inventory", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Newaction = m_UI.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Down;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Sit;
    private readonly InputAction m_Player_EnterDoor;
    private readonly InputAction m_Player_Attack;
    private readonly InputAction m_Player_Grab;
    private readonly InputAction m_Player_PickUp;
    private readonly InputAction m_Player_UseHealthPotion;
    private readonly InputAction m_Player_SkillWheel;
    private readonly InputAction m_Player_ReloadTommyGun;
    public struct PlayerActions
    {
        private @CustomInput m_Wrapper;
        public PlayerActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Down => m_Wrapper.m_Player_Down;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Sit => m_Wrapper.m_Player_Sit;
        public InputAction @EnterDoor => m_Wrapper.m_Player_EnterDoor;
        public InputAction @Attack => m_Wrapper.m_Player_Attack;
        public InputAction @Grab => m_Wrapper.m_Player_Grab;
        public InputAction @PickUp => m_Wrapper.m_Player_PickUp;
        public InputAction @UseHealthPotion => m_Wrapper.m_Player_UseHealthPotion;
        public InputAction @SkillWheel => m_Wrapper.m_Player_SkillWheel;
        public InputAction @ReloadTommyGun => m_Wrapper.m_Player_ReloadTommyGun;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Down.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDown;
                @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Sit.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSit;
                @Sit.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSit;
                @Sit.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSit;
                @EnterDoor.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEnterDoor;
                @EnterDoor.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEnterDoor;
                @EnterDoor.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEnterDoor;
                @Attack.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @Grab.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGrab;
                @Grab.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGrab;
                @Grab.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGrab;
                @PickUp.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPickUp;
                @PickUp.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPickUp;
                @PickUp.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPickUp;
                @UseHealthPotion.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUseHealthPotion;
                @UseHealthPotion.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUseHealthPotion;
                @UseHealthPotion.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUseHealthPotion;
                @SkillWheel.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSkillWheel;
                @SkillWheel.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSkillWheel;
                @SkillWheel.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSkillWheel;
                @ReloadTommyGun.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReloadTommyGun;
                @ReloadTommyGun.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReloadTommyGun;
                @ReloadTommyGun.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnReloadTommyGun;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Sit.started += instance.OnSit;
                @Sit.performed += instance.OnSit;
                @Sit.canceled += instance.OnSit;
                @EnterDoor.started += instance.OnEnterDoor;
                @EnterDoor.performed += instance.OnEnterDoor;
                @EnterDoor.canceled += instance.OnEnterDoor;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Grab.started += instance.OnGrab;
                @Grab.performed += instance.OnGrab;
                @Grab.canceled += instance.OnGrab;
                @PickUp.started += instance.OnPickUp;
                @PickUp.performed += instance.OnPickUp;
                @PickUp.canceled += instance.OnPickUp;
                @UseHealthPotion.started += instance.OnUseHealthPotion;
                @UseHealthPotion.performed += instance.OnUseHealthPotion;
                @UseHealthPotion.canceled += instance.OnUseHealthPotion;
                @SkillWheel.started += instance.OnSkillWheel;
                @SkillWheel.performed += instance.OnSkillWheel;
                @SkillWheel.canceled += instance.OnSkillWheel;
                @ReloadTommyGun.started += instance.OnReloadTommyGun;
                @ReloadTommyGun.performed += instance.OnReloadTommyGun;
                @ReloadTommyGun.canceled += instance.OnReloadTommyGun;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Main
    private readonly InputActionMap m_Main;
    private IMainActions m_MainActionsCallbackInterface;
    private readonly InputAction m_Main_Escape;
    private readonly InputAction m_Main_Save;
    private readonly InputAction m_Main_Load;
    private readonly InputAction m_Main_Inventory;
    public struct MainActions
    {
        private @CustomInput m_Wrapper;
        public MainActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Escape => m_Wrapper.m_Main_Escape;
        public InputAction @Save => m_Wrapper.m_Main_Save;
        public InputAction @Load => m_Wrapper.m_Main_Load;
        public InputAction @Inventory => m_Wrapper.m_Main_Inventory;
        public InputActionMap Get() { return m_Wrapper.m_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void SetCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterface != null)
            {
                @Escape.started -= m_Wrapper.m_MainActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnEscape;
                @Save.started -= m_Wrapper.m_MainActionsCallbackInterface.OnSave;
                @Save.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnSave;
                @Save.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnSave;
                @Load.started -= m_Wrapper.m_MainActionsCallbackInterface.OnLoad;
                @Load.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnLoad;
                @Load.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnLoad;
                @Inventory.started -= m_Wrapper.m_MainActionsCallbackInterface.OnInventory;
                @Inventory.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnInventory;
                @Inventory.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnInventory;
            }
            m_Wrapper.m_MainActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
                @Save.started += instance.OnSave;
                @Save.performed += instance.OnSave;
                @Save.canceled += instance.OnSave;
                @Load.started += instance.OnLoad;
                @Load.performed += instance.OnLoad;
                @Load.canceled += instance.OnLoad;
                @Inventory.started += instance.OnInventory;
                @Inventory.performed += instance.OnInventory;
                @Inventory.canceled += instance.OnInventory;
            }
        }
    }
    public MainActions @Main => new MainActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_Newaction;
    public struct UIActions
    {
        private @CustomInput m_Wrapper;
        public UIActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_UI_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_UIActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSit(InputAction.CallbackContext context);
        void OnEnterDoor(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnGrab(InputAction.CallbackContext context);
        void OnPickUp(InputAction.CallbackContext context);
        void OnUseHealthPotion(InputAction.CallbackContext context);
        void OnSkillWheel(InputAction.CallbackContext context);
        void OnReloadTommyGun(InputAction.CallbackContext context);
    }
    public interface IMainActions
    {
        void OnEscape(InputAction.CallbackContext context);
        void OnSave(InputAction.CallbackContext context);
        void OnLoad(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
